## 1
### ¿Cuál es el resultado que se obtiene al ejecutar este programa?
Lo que hace el programa es dibujar sobre la pantalla cada que se pasa el mouse por la pantalla 

## 2.
### - ¿Qué fue lo que incluimos en el archivo .h?

Le agregamos la posibilidad de cambiar el color de las particulas 

### - ¿Cómo funciona la aplicación?

cuando se mueve el mouse pinta las particulas sobre la pantalla

### - ¿Qué hace la función mouseMoved?

Muestra el camino en donde se pintan las particulas

### - ¿Qué hace la función mousePressed?

Cambia el color de las particulas

### - ¿Qué hace la función setup?

Es lo que primero ejecuta el programa 

### - ¿Qué hace la función update?

Lo que hace que siempre se actualice de manera infinta 

### - ¿Qué hace la función draw?

Lo que permite mostrar el render 

## 3. 
### -Analiza la aplicación anterior. ¿Qué hace cada función? ¿Qué hace cada línea de código?
- La primera linea es donde se declaran las clases y variables de el archivo
- La segunda linea es donde está el inicio de la app y donde se configura el color del fondo 
- La tercera linea es donde se deberia actualizar la aplicacion constantemente
- La cuarta linea está el metodo que permite dibujar, tiene las posicisiones de las particulas, establece el color de las particulas y dibuja un circulo por donde se pase el puntero 
- La quinta linea es la que tiene en cuenta en que posicion está el mouse en todo momento, y agrega las particulas en la posicion del mouse y hace la funcion de eliminar las particulas que ya no se usan 
- La sexta linea detecta cuando se le da click al boton y cambia el color de las particulas de manera aleatoria 

## 5. 
- En la unidad anterior introdujimos el concepto de puntero. Ahora vamos a profundizar en este concepto de manera práctica.

El siguiente ejemplo se supone (en la actividad que sigue vas a corregir un error) que te permite seleccionar una espera y moverla con el mouse.

Modifica el archivo `ofApp.h` de la siguiente manera:


``` 
#pragma once

#include "ofMain.h"


class Sphere {
public:
    Sphere(float x, float y, float radius);
    void draw();
    void update(float x, float y);
    float getX();
    float getY();
    float getRadius();

private:
    float x, y;
    float radius;
    ofColor color;
};

class ofApp : public ofBaseApp{

    public:
        void setup();
        void update();
        void draw();

        void mouseMoved(int x, int y );
        void mousePressed(int x, int y, int button);

    private:

        vector<Sphere*> spheres;
        Sphere* selectedSphere;
};

```

- Y el archivo ```ofApp.cpp``` así:


```
#include "ofApp.h"

Sphere::Sphere(float x, float y, float radius) : x(x), y(y), radius(radius) {
    color = ofColor(ofRandom(255), ofRandom(255), ofRandom(255));
}

void Sphere::draw() {
    ofSetColor(color);
    ofDrawCircle(x, y, radius);
}

void Sphere::update(float x, float y) {
    this->x = x;
    this->y = y;
}

float Sphere::getRadius() {
    return radius;
}

float Sphere::getX() {
    return x;
}

float Sphere::getY() {
    return y;
}

//--------------------------------------------------------------
void ofApp::setup(){
    ofBackground(0);

    for (int i = 0; i < 5; i++) {
        float x = ofRandomWidth();
        float y = ofRandomHeight();
        float radius = ofRandom(20, 50);
        spheres.push_back(new Sphere(x, y, radius));
    }
    selectedSphere = nullptr;

}

//--------------------------------------------------------------
void ofApp::update(){
    if (selectedSphere != nullptr) {
        selectedSphere->update(ofGetMouseX(), ofGetMouseY());
    }
}

//--------------------------------------------------------------
void ofApp::draw(){
    for (auto sphere : spheres) {
        sphere->draw();
    }
}


//--------------------------------------------------------------
void ofApp::mouseMoved(int x, int y ){

}

//--------------------------------------------------------------
void ofApp::mousePressed(int x, int y, int button){

    if(button == OF_MOUSE_BUTTON_LEFT){
        for (auto sphere : spheres) {
            float distance = ofDist(x, y, sphere->getX(), sphere->getY());
            if (distance < sphere->getRadius()) {

                selectedSphere = sphere;
                break;
            }
        }
    }
}

``` 



**¿Cuál es la definición de puntero?**

Un puntero en programación es una variable que almacena la dirección de memoria de otra variable. En lugar de almacenar directamente un valor, un puntero almacena la ubicación en la memoria donde se encuentra el valor. Los punteros permiten acceder y manipular la información en esa ubicación de memoria.

**¿Dónde Está el Puntero?**

En ofApp.h:

``` c++
class ofApp : public ofBaseApp {
    // ...
private:
    vector<Sphere*> spheres;
    Sphere* selectedSphere;
};

```

* vector<Sphere*> spheres; es un vector de punteros a objetos de la clase Sphere. Cada elemento en este vector es un puntero que apunta a una instancia de Sphere.
  
* Sphere* selectedSphere; es un puntero a un objeto de la clase Sphere. Este puntero se usa para hacer referencia a la esfera que actualmente está seleccionada.

**¿Cómo se Inicializa el Puntero?**

En el archivo ofApp.cpp, el puntero selectedSphere se inicializa:

``` c++
selectedSphere = nullptr;

```

selectedSphere = nullptr;: Inicializa el puntero selectedSphere a nullptr, lo que significa que no apunta a ninguna ubicación de memoria válida al comienzo. Esto es una práctica común para evitar que el puntero apunte a una dirección de memoria aleatoria o inválida.


**¿Para Qué Se Está Usando el Puntero?**

* selectedSphere: Se utiliza para hacer referencia a la esfera actualmente seleccionada por el usuario. Cuando se hace clic en una esfera, selectedSphere apunta a esa esfera, permitiendo que la esfera seleccionada se mueva con el ratón.

* spheres: El vector spheres almacena punteros a instancias de Sphere. Se utiliza para gestionar y manipular un conjunto de esferas, permitiendo crear múltiples esferas dinámicamente y acceder a ellas a través de sus punteros.

**¿Qué Es Exactamente lo Que Está Almacenado en el Puntero?**

* selectedSphere: Este puntero almacena la dirección de memoria de un objeto Sphere que se ha seleccionado. Si no hay ninguna esfera seleccionada, el puntero es nullptr. Si hay una esfera seleccionada, el puntero contiene la dirección de esa instancia específica de Sphere.

* spheres: Este vector almacena punteros a diferentes instancias de Sphere. Cada puntero dentro del vector apunta a una ubicación en la memoria donde se encuentra un objeto Sphere creado dinámicamente. Así, spheres contiene las direcciones de memoria de múltiples objetos Sphere.

## 6 

**El código anterior tiene un problema. ¿Puedes identificar cuál es? ¿Cómo lo solucionarías? Recuerda que deberías poder seleccionar una esfera y moverla con el mouse.**

### Identificación del Problema

1. Problema de Actualización de la Posición:

    * En el método update de ofApp, la posición de la esfera seleccionada se actualiza directamente a la posición del mouse (selectedSphere->update(ofGetMouseX(), ofGetMouseY());). Esto hace que, mientras el botón del mouse está presionado, la esfera se mueva con el mouse, pero una vez que se suelta el botón, la esfera debería dejar de moverse. No hay ningún código que haga que la esfera deje de moverse al soltar el botón del mouse.
No hay Desselección de Esfera:

2. No hay lógica para deselectar la esfera seleccionada cuando el mouse se mueve o se suelta.
   
   * Esto puede causar problemas si se selecciona una esfera y luego se mueve el mouse, ya que la esfera seguirá moviéndose aunque el mouse no esté presionado.
  
  ### Solución

1. Agregar Deselección:

* Cambiar el comportamiento en `mousePressed` para que solo se seleccione una esfera si el mouse está presionado y no moverla si el botón no está presionado.




## 7 Modifica el archivo ```ofApp.h```

```
#pragma once

#include "ofMain.h"

class Sphere 
{
public:
    Sphere(float x, float y, float radius);
    void draw() const;

    float x, y;
    float radius;
    ofColor color;
};

class ofApp : public ofBaseApp {
public:
    void setup();
    void update();
    void draw();

    void keyPressed(int key);

private:
    std::vector<Sphere*> globalVector;
    void createObjectInStack();
};

```
## y el archivo ```oFApp.cpp asi:

```
#include "ofApp.h"

Sphere::Sphere(float x, float y, float radius) : x(x), y(y), radius(radius) {
    color = ofColor(ofRandom(255), ofRandom(255), ofRandom(255));
}

void Sphere::draw() const {
    ofSetColor(color);
    ofDrawCircle(x, y, radius);
}

void ofApp::setup() {
    ofBackground(0);
}

void ofApp::update() {
}

void ofApp::draw() {
    ofSetColor(255);
    for (Sphere* sphere : globalVector) {
        if (sphere != nullptr) {
            ofDrawBitmapString("Objects pointed: " + ofToString(globalVector.size()), 20, 20);
            ofDrawBitmapString("Attempting to draw stored object...", 20, 40);
            ofDrawBitmapString("Stored Object Position: " + ofToString(sphere->x) + ", " + ofToString(sphere->y), 20, 60);
            sphere->draw();
        }
    }
}

void ofApp::keyPressed(int key) {
    if (key == 'c') {
        if (globalVector.empty()) {
            createObjectInStack();
        }
    }
    else if (key == 'd') {
        if (!globalVector.empty()) {
            ofLog() << "Accessing object in global vector: Position (" << globalVector[0]->x << ", " << globalVector[0]->y << ")";
        }
        else {
            ofLog() << "No objects in the global vector.";
        }
    }
}

void ofApp::createObjectInStack() {
    Sphere localSphere(ofRandomWidth(), ofRandomHeight(), 30);
    globalVector.push_back(&localSphere);
    ofLog() << "Object created in stack: Position (" << localSphere.x << ", " << localSphere.y << ")";
    localSphere.draw();
}

``` 

- ¿Qué sucede cuando presionas la tecla “c”?

* Trata de dibujar en la pantalla un objeto que está almacenado en una región de la memoria

- Realiza esta modificación a la función createObjectInStack donde claramente se está creando un objeto, pero se está creando en el heap y no en el stack, así que no te dejes confundir por el nombre de la función.

```
void ofApp::createObjectInStack() {
    // Sphere localSphere(ofRandomWidth(), ofRandomHeight(), 30);
    // globalVector.push_back(&localSphere);
    // ofLog() << "Object created in stack: Position (" << localSphere.x << ", " << localSphere.y << ")";
    // localSphere.draw();
    Sphere* heapSphere = new Sphere(ofRandomWidth(), ofRandomHeight(), 30);
    globalVector.push_back(heapSphere);
    ofLog() << "Object created in heap: Position (" << heapSphere->x << ", " << heapSphere->y << ")";
    heapSphere->draw();
}
```

- ¿Qué sucede cuando presionas la tecla “c”?

Se dibuja lo que anteriormente estaba almacenado 

- ¿Por qué ocurre esto?

Crear el objeto en el heap asegura que el objeto persiste mientras el puntero sea válido, La memoria del objeto no se libera automáticamente, lo que requiere que gestiones la memoria manualmente para evitar fugas.

## 8 Construye un experimento (un programa) en el que puedas crear y dibujar objetos que se almacenan:
